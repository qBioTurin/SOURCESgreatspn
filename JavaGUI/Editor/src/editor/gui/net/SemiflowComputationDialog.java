/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package editor.gui.net;

import editor.domain.semiflows.FlowsGenerator;
import editor.domain.semiflows.TooManyRowsException;
import java.awt.Frame;
import javax.swing.SwingUtilities;

/**
 *
 * @author elvio
 */
public class SemiflowComputationDialog extends javax.swing.JDialog implements FlowsGenerator.ProgressObserver {

    FlowsGenerator algo;
    Thread thread;
    
    /**
     * Creates new form SemiflowComputationDialog
     * @param owner
     * @param algo
     */
    public SemiflowComputationDialog(Frame owner, FlowsGenerator algo) {
        super(owner, true);
        this.algo = algo;
        initComponents();
        
        setLocationRelativeTo(owner);
        getRootPane().setDefaultButton(jButtonCancel);
        
        thread = new Thread(new ComputationThread());
    }
    
    public void showDialogAndStart() {
//        System.out.println("showDialogAndStart");
        thread.start();
        setVisible(true);
    }

    private long lastTimeMillis = 0;
    private int lastStep = -1;
    private int countAdvances = 0;
    private static final long TIME_STEP = 1000;
    private static final int MAX_ADV_TO_PRINT = 2000;
    @Override
    public void advance(final int step, final int total, 
                        final int subStep, final int subTotal) 
    {
        long timeMillis = System.currentTimeMillis();
        countAdvances++;
        if (lastStep != step || 
            countAdvances > MAX_ADV_TO_PRINT ||
            timeMillis > lastTimeMillis + TIME_STEP) 
        {
            final boolean showSubstep = (lastStep == step);
//            System.out.println("advance "+step+"/"+total+"  "+subStep+"/"+subTotal+"  "+showSubstep);
            lastTimeMillis = timeMillis;
            lastStep = step;
            countAdvances = 0;
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    progressBar.setMaximum(total);
                    progressBar.setValue(step);
                    if (showSubstep) {
                        double ratio = Math.log(subStep) / Math.log(subTotal);
                        progressSubBar.setMaximum(100);
                        double val = 1 - ratio;
                        val = 1 - (val * val);
                        progressSubBar.setValue((int)(100 * val));
                        progressSubBar.setEnabled(true);
                    }
                    else {
                        progressSubBar.setEnabled(false);
                        progressSubBar.setMaximum(100);
                        progressSubBar.setValue(0);
                    }
                }
            });
        }
    }
    
    class ComputationThread implements Runnable {
        @Override
        public void run() {
            try {
                algo.compute(false, SemiflowComputationDialog.this);
                System.out.println("There are "+algo.numFlows()+" flow elements.");
            }
            catch (ArithmeticException e) {
                algo.setFailed("Computation failed: Arithmetic overflow.");
            }
            catch (InterruptedException ie) {
                algo.setFailed("Computation interrupted.");
            }
            catch (TooManyRowsException e) {
                algo.setFailed("Computation failed: Too many rows ("+algo.getMaxRows()+").");
            }
            finally {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        setVisible(false);
                        dispose();
                    }
                });                
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jButtonCancel = new javax.swing.JButton();
        labelStep = new javax.swing.JLabel();
        progressSubBar = new javax.swing.JProgressBar();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Computing flows. Please, wait.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 16, 8, 16);
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 16, 8, 16);
        getContentPane().add(progressBar, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 8, 0);
        getContentPane().add(jButtonCancel, gridBagConstraints);

        labelStep.setText("Substep:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 16, 4, 16);
        getContentPane().add(labelStep, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 16, 4, 16);
        getContentPane().add(progressSubBar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        algo.setInterrupted();
    }//GEN-LAST:event_jButtonCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelStep;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JProgressBar progressSubBar;
    // End of variables declaration//GEN-END:variables
}
