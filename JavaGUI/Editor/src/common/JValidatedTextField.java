/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package common;

import editor.gui.ResourceFactory;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.Icon;
import javax.swing.UIManager;
import javax.swing.event.EventListenerList;

/**
 *
 * @author Elvio
 */
public class JValidatedTextField extends javax.swing.JPanel {

    private static final Icon WARN = ResourceFactory.getInstance().getError16();
    private static final Icon EMPTY = ResourceFactory.getInstance().getEmpty16();
    
    private boolean validText = true;
    private TextValidator validator = null;
    private String lastValidText = "";
    
    /**
     * Creates new form JValidatedTextField
     */
    public JValidatedTextField() {
        initComponents();
        
        jTextField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (validateText(true))
                    fireAction(new ActionEvent(this, 0, ""));
            }
        });
        jTextField.addKeyListener(new KeyListener() {
            @Override public void keyTyped(KeyEvent e) { validateText(false); }
            @Override public void keyPressed(KeyEvent e) { validateText(false); }
            @Override public void keyReleased(KeyEvent e) { validateText(false); }
        });
        jTextField.addFocusListener(new FocusListener() {
            @Override public void focusGained(FocusEvent e) {
            }
            @Override public void focusLost(FocusEvent e) {
                if (validateText(true))
                    fireAction(new ActionEvent(this, 0, ""));
            }
        });
    }

    private boolean  validateText(boolean changeLastValidText) {
        if (validator != null) {
            String reason = validator.isValidText(jTextField.getText());
            if (validText != (reason==null)) {
                validText = (reason==null);
                jLabelIcon.setIcon(validText ? EMPTY : WARN);
                jTextField.setForeground(validText ? UIManager.getColor("TextField.foreground") : Color.RED);
            }
            if (reason == null)
                jLabelIcon.setToolTipText(null);
            else if (!reason.equals(jLabelIcon.getToolTipText()))
                jLabelIcon.setToolTipText(reason);
        }
        else 
            validText = true;
        
        if (!validText)
            return false;
        
        // return if the text is valid and has changed since the last valid text state
        boolean sameText = lastValidText.equals(jTextField.getText());
        if (changeLastValidText)
            lastValidText = jTextField.getText();        
        return !sameText;
    }

    public TextValidator getValidator() {
        return validator;
    }

    public void setValidator(TextValidator validator) {
        this.validator = validator;
    }
    
    public void setText(String text) {
        jTextField.setText(text);
        validateText(true);
    }
    
    public String getText() {
        return jTextField.getText();
    }

    // I Listeners registrati a questo textfield - registrano il cambio di testo
    private EventListenerList myListenerList = new EventListenerList();
    public void addActionListener(ActionListener al) {
        myListenerList.add(ActionListener.class, al);
    }    
    public void removeActionListener(ActionListener al) {
        myListenerList.remove(ActionListener.class, al);
    }    
    public ActionListener[] getActionListeners() {
        return myListenerList.getListeners(ActionListener.class);
    }    
    protected void fireAction(ActionEvent evt) {
        ActionListener[] list = getActionListeners();
        for (ActionListener al : list) {
            al.actionPerformed(evt);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabelIcon = new javax.swing.JLabel();
        jTextField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        jLabelIcon.setIcon(EMPTY);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 3);
        add(jLabelIcon, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(jTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelIcon;
    private javax.swing.JTextField jTextField;
    // End of variables declaration//GEN-END:variables
}
