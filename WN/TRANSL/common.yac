mdrate	   : condlist EVER 
	     COLON
	{
	 pmd = (MDrate_p)emalloc(sizeof(struct MD_RATE));
	 pmd->next = mdptr;
	 mdptr = pmd;
	 pmd->guard = NULL;
	 pmd->code = NULL;
	 prd_h = prd_t = NULL;
	 pcode_h = pcode_t = NULL;
	}
	     kexpression SEMICOLON
	{
	 if(exp_on)
          {
           emit(TYPEEND,"",0.0,0);
	   pmd->code = pcode_h;
          } 
         else
	  pmd->code = NULL;
	 tabt[nmd].md_rate_val = mdptr;
	 mdptr = NULL;
	}
           |
            EVER
	    COLON
	{
	 pmd=(MDrate_p)emalloc(sizeof(struct MD_RATE));
	 pmd->next = mdptr;
	 mdptr = pmd;
	 pmd->guard = NULL;
	 pmd->code = NULL;
	 prd_h = prd_t = NULL;
	 pcode_h = pcode_t = NULL;
	}
	     kexpression SEMICOLON
	{
         if(exp_on)
          {
	   emit(TYPEEND,"",0.0,0);
	   pmd->code = pcode_h;
          }
         else
          pmd->code = NULL;
	 tabt[nmd].md_rate_val = mdptr;
	 mdptr = NULL;
	}
	   ;
condlist   : condlist  WHEN 
	{
	 pmd = (MDrate_p)emalloc(sizeof(struct MD_RATE));
	 pmd->next = mdptr;
	 mdptr = pmd;
	 pmd->guard = NULL;
	 pmd->code = NULL;
	 prd_h = prd_t = NULL;
	 pcode_h = pcode_t = NULL;
	}
	     OBRCK
	     pred
	{
	 gen(TYPEEND,"");
	 pmd->guard = prd_h;
	 check_predicate(pmd->guard,MDRATE);
	}
	     CBRCK
	     COLON kexpression SEMICOLON
	{
         if(exp_on)
          {
	   emit(TYPEEND,"",0.0,0);
	   pmd->code = pcode_h;
          }
         else
          pmd->code = NULL;
	}
	   |  WHEN
	{
	 pmd=(MDrate_p)emalloc(sizeof(struct MD_RATE));
	 pmd->next=mdptr;
	 mdptr=pmd;
	 pmd->guard = NULL;
	 pmd->code = NULL;
	 prd_h = prd_t = NULL;
	 pcode_h = pcode_t = NULL;
	}
	     OBRCK
	     pred
	{
	 gen(TYPEEND,"");
	 pmd->guard = prd_h;
	 check_predicate(pmd->guard,MDRATE);
	}
	     CBRCK
	     COLON kexpression SEMICOLON
	{
         if(exp_on)
          {
	   emit(TYPEEND,"",0.0,0);
	   pmd->code = pcode_h;
          }
         else
          pmd->code = NULL;
	}
	   ;
kexpression   :  kexpression plusop vterm
	{
	 emit(sign==1 ? TYPEPLUS : TYPEMINUS,"",0.0,0);
	}
	   | vterm
	   ;
vterm	   : vterm mulop vfatt
	{
	 emit(prsign==1 ? TYPEMOLT : TYPEDIV,"",0.0,0);
	}
	   | vfatt
	   ;
vfatt	   : 
           INV OPAR kexpression CPAR
	{
         if(parse_DEF != MDRATE)
          {
           fprintf(stdout,"Error: INV rule, token %s floating in expression\n",str_in);
           exit(1);
          }
	 emit(TYPEINV,"",0.0,0);
	}
           | SQRT OPAR kexpression CPAR
	{
	 emit(TYPESQRT,"",0.0,0);
	}
           | POW OPAR kexpression  COMMA kexpression CPAR
	{
	 emit(TYPEPOW,"",0.0,0);
	}
           | FACT OPAR kexpression CPAR
        {
         emit(TYPEFACT,"",0.0,0);
        }
           | COMB OPAR kexpression  COMMA kexpression CPAR
        {
         emit(TYPECOMB,"",0.0,0);
        }
	   | OPAR kexpression CPAR
	   | REALNUM
	{
         if(parse_DEF != MDRATE)
          {
           fprintf(stdout,"Error: REALNUM rule token %s floating in expression\n",str_in);
           exit(1);
          }
	 emit(TYPEREALNUM,"",real_val,0);
	}
           | NUM
        {
         emit(TYPENUM,str_in,atof(str_in),str_val);
        }
	   | STRING
	{
	 emit(TYPEPAR,str_in,0.0,0);
	}
           | VBAR STRING
        {
#ifdef GSPN
	 fprintf(stdout,"Coloured marking definition is not allowed in GSPN specification\n");
         exit(1);
#endif
#ifdef SWN
         strcpy(class_name,str_in);
#endif
        }
             POINT STRING
        {
#ifdef GSPN
	 fprintf(stdout,"Colour class cardinality is not allowed in GSPN specification\n");
         exit(1);
#endif
#ifdef SWN
         strcpy(sbc_name,str_in);
#endif
        }
             VBAR
        {
#ifdef GSPN
	 fprintf(stdout,"Colour class cardinality is not allowed in GSPN specification\n");
         exit(1);
#endif
#ifdef SWN
         /* Controllo su esistenza della classe */
	 if((ind=get_index(class_name))==-1)
	  out_error(ERROR_MISSING_CLASS,0,0,0,0,class_name,NULL);
	 else
          {  
           /* Controllo su esistenza sottoclasse */
	   if((sbc_ind=already_exist(sbc_name,ind,STAT))==0)
	    out_error(ERROR_MISSING_STATIC,0,0,0,0,sbc_name,NULL);
	   else 
	    emit(TYPENUM,"",0.0,tabc[ind].sbclist[sbc_ind-1].card);
          }
#endif
        }
           | VBAR STRING VBAR
        {
#ifdef GSPN
	 fprintf(stdout,"Colour class cardinality is not allowed in GSPN specification\n");
         exit(1);
#endif
#ifdef SWN
         /* Controllo su esistenza della classe */
         if((ind=get_index(str_in))==-1)
          {
           /* Controllo su esistenza sottoclasse */
           for(i=0,stop=FALSE;!stop && i<ncl;i++)
            if((ind=already_exist(str_in,i,STAT))!=0) stop=TRUE;
	   if(stop==FALSE)
	    out_error(ERROR_MISSING_CLASS,0,0,0,0,str_in,NULL);
	   else 
	    emit(TYPENUM,"",0.0,tabc[i-1].sbclist[ind-1].card);
           /* Questa cardinalita'e'quella della prima sottoclasse */
           /* trovata con quel nome                               */
          }
         else 
	  emit(TYPENUM,"",0.0,get_class_card(ind));
#endif
        }
	   | MAXT OPAR kexpression COMMA kexpression CPAR
	{
	 emit(TYPEMAX,"",0.0,0);
	}
	   | MINT OPAR kexpression COMMA  kexpression CPAR
	{
	 emit(TYPEMIN,"",0.0,0);
	}
	   | DIESIS STRING
	{
#ifdef GSPN
	 emit(TYPEMARK,str_in,0.0,0);
#endif
#ifdef SWN
	 fprintf(stdout,"Place marking #%s is not allowed in SWN specification\n",str_in);
         exit(1);
#endif
	}
	   ;
plusop	   : PLUS
	{
	 sign = 1;
	}
	   | MINUS
	{
	 sign = -1;
	}
	   ;
mulop	   : MOLT
	{
	 prsign = 1;
	}
	   | DIV
	{
	 prsign = 0;
	}
	   ;
