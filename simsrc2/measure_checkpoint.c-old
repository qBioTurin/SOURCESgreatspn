/********************************************************************
 *
 * Date: Torino, April 20, 1993
 * Program: measure_checkpoint.c
 * Description: checkpoint routines for measurer module of GreatSPN 1.6
 * Programmer: Giovanni Chiola
 * notes:
 *   1) This program allows both normal (forward) and reversed
 *      (backward) simulation. Periodic checkpoints are stored on file
 *      in order to allow both extended backtracking and possibility
 *      of continuation and resume of previous runs.
 *
 ********************************************************************/

/*
#define DEBUG
*/


#ifdef DEBUG

#define DEBUGCALLS
/*
*/

#endif

#include "measure_decl.h"


double cur_time;

static double last_time = 0.0;



do_state_transition( tt )
double tt;
    {
    Trans_p t_p;
    double delta = tt - cur_time;
    Place_p place_p = p_list;
    Prob_p prob_p = Prob+1;
    unsigned np, nn;
    char cc;

#ifdef DEBUGCALLS
  fprintf(stderr,"       Start of do_state_transition %f\n", tt );
#endif
    for ( np = 0 ; np++ < place_num ; place_p++ ) {
      int ntok = DM[np];
	if ( ntok > place_p->aub )
	    place_p->aub = ntok;
	if ( ntok < place_p->alb )
	    place_p->alb = ntok;
	ntok -= place_p->lbound;
        *(place_p->tok_distr + ntok) += delta;
      }
    for ( np = maxprob ; np-- ; prob_p++ ) {
        cc = prob_p->type;
        switch ( cc ) {
          case 'e' :
          case 'E' :
              nn = prob_p->place;
	      if ( (nn = DM[nn]) )
                  prob_p->val += delta * nn;
	    break;
          case 'c' :
          case 'C' :
              nn = prob_p->place;
              if ( (nn = DM[nn]) && (evaluate_cond(prob_p->cond,cmarks)) )
		  prob_p->val += delta * nn;
	    break;
          case 'p' :
          case 'P' :
              if ( evaluate_cond(prob_p->cond,cmarks) )
		  prob_p->val += delta;
	    break;
        }
      }

    cur_time = tt;

#ifdef DEBUGCALLS
  fprintf(stderr,"       End of do_state_transition\n" );
#endif
}


static FILE * ckpf = NULL;
char cur_checkpoint_name[256];
char tmp_checkpoint_name[256];
char history_name[256];
char cat_checkpoint_history[1600];

do_checkpoint()
    {

#ifdef DEBUGCALLS
  fprintf(stderr,"    Start of do_checkpoint\n" );
#endif
    if ( (ckpf = fopen(cur_checkpoint_name,"w")) == NULL ) {
	fprintf(stderr,"\n Measurer ERROR: couldn't open %s file\n",
		       cur_checkpoint_name );
	return;
      }
    out_cur_checkpoint( ckpf );
    (void)fclose(ckpf); ckpf = NULL;
    system( cat_checkpoint_history );
#ifdef DEBUGCALLS
  fprintf(stderr,"    End of do_checkpoint\n" );
#endif
}


out_cur_checkpoint( ckpf )
FILE * ckpf;
    {
    int nn, ii;
    unsigned char * uc_p = cmarks;
    Place_p place_p = p_list;
    Trans_p trans_p = t_list;
    Prob_p prob_p = Prob+1;

#ifdef DEBUGCALLS
  fprintf(stderr,"      Start of out_cur_checkpoint\n" );
#endif
    fprintf(ckpf,"%lg %lg %d %d %d", cur_time, last_time,
			place_num, trans_num, maxprob );
    for ( ii = no_cod ; ii-- ; ++uc_p ) {
#ifdef DEBUG
  fprintf(stderr,"         ... out_cur_checkpoint: coding ii=%d\n", ii );
#endif
	fprintf(ckpf," %d", *uc_p );
      }
#ifdef DEBUG
  fprintf(stderr,"      ... out_cur_checkpoint: marking saved\n" );
#endif
    fprintf(ckpf,"\n");
    for ( nn = 0 ; nn++ < place_num ;  place_p++ ) {
	fprintf(ckpf," %d %d %d", nn, place_p->alb, place_p->aub );
#ifdef DEBUG
  fprintf(stderr,"      ... out_cur_checkpoint: place %d %d %d\n", nn,
						place_p->alb, place_p->aub );
#endif
	for ( ii = place_p->alb - place_p->lbound ;
	      ii <= place_p->aub - place_p->lbound ; ii++ ) {
#ifdef DEBUG
  fprintf(stderr,"         ... out_cur_checkpoint: ii=%d\n", ii );
#endif
	    fprintf(ckpf," %lg %lg", *(place_p->tok_distr+ii),
				     *(place_p->cum_distr+ii) );
          }
        fprintf(ckpf,"\n");
      }
    for ( nn = 0 ; nn++ < trans_num ;  trans_p++ ) {
#ifdef DEBUG
fprintf(stderr,"      ... out_cur_checkpoint: trans %d %d %d\n", nn,
					trans_p->count, trans_p->cumcount);
#endif
        fprintf(ckpf,"  %d %ld %ld\n", nn, trans_p->count, trans_p->cumcount );
      }
    for ( nn = 0 ; nn++ < maxprob ;  prob_p++ ) {
#ifdef DEBUG
fprintf(stderr,"      ... out_cur_checkpoint: prob %d\n",nn);
#endif
        fprintf(ckpf," %d %lg %lg\n", nn, prob_p->val, prob_p->cumval );
      }
#ifdef DEBUGCALLS
  fprintf(stderr,"      End of out_cur_checkpoint\n" );
#endif
}


double search_simulation_state( time, fp )
double time;
FILE * fp;
    {
    double ttt;
    int np, nt, npro;

#ifdef DEBUGCALLS
  fprintf(stderr,"        Start of search_simulation_state(%1.6g)\n", time );
#endif
    for ( fscanf(fp,"%lg",&ttt) ; ttt > time ; fscanf(fp,"%lg",&ttt) ) {
	fscanf(fp,"%*g %d %d %d", &np, &nt, &npro );
	for ( np++ ; np-- ; )
	    while ( getc(fp) != '\n' );
	for ( ; nt-- ; )
	    while ( getc(fp) != '\n' );
	for ( ; npro-- ; )
	    while ( getc(fp) != '\n' );
      }
#ifdef DEBUGCALLS
  fprintf(stderr,"        End of search_simulation_state(%1.6g)\n", ttt );
#endif
    return( ttt );
}


restore_checkpoint( time )
double time;
    {
    FILE * fp;
    Place_p place_p = p_list;
    Trans_p trans_p = t_list;
    Prob_p prob_p = Prob+1;
    unsigned char * uc_p = cmarks;
    int np, nt, npro;
    double dd;
    int nn, ii, jj;
    unsigned long uu;

#ifdef DEBUGCALLS
  fprintf(stderr,"    Start of restore_checkpoint time=%1.6g\n", time );
#endif
    if ( (fp = fopen(history_name,"r")) == NULL ) {
	fprintf(stderr,"\n Measurer ERROR: couldn't open %s file\n",
		       history_name );
	return;
      }
    (void) search_simulation_state( time, fp );
    cur_time = time;
    if ( fscanf(fp,"%lg %d %d %d", &last_time, &np, &nt, &npro ) < 4 ||
         nt != trans_num || np != place_num || npro != maxprob ) {
	fprintf(stderr,"Measure ERROR: inconsistency in history file!\n");
	fprintf(stderr,"nt=%d trans_num=%d; np=%d place_num=np;",
                       nt, trans_num, np, place_num );
	fprintf(stderr," npro=%d maxprob=%d\n", npro, maxprob );
	printf("E\n"); fflush(stdout);
	exit(1);
      }
#ifdef DEBUG
  fprintf(stderr,"    ... restore_checkpoint: reading marking\n" );
#endif
    for ( ii = no_cod ; ii-- ; ++uc_p ) {
	fscanf(fp,"%d",&nn); *uc_p = (unsigned)nn;
      }
    while ( getc(fp) != '\n' );
    decode_mark( cmarks, DM );
#ifdef DEBUG
  fprintf(stderr,"    ... restore_checkpoint: reading token distr\n" );
#endif
    for ( nn = 0 ; nn++ < place_num ;  place_p++ ) {
	fscanf(fp,"%d %d %d", &np, &ii, &jj );
	place_p->alb = ii;
	place_p->aub = jj;
	for ( ii -= place_p->lbound, jj -= place_p->lbound ; ii <= jj ; ii++ ) {
#ifdef DEBUG
  fprintf(stderr,"        ... restore_checkpoint: place %d tok %d\n", nn, ii );
#endif
	    fscanf(fp,"%lg", &dd ); *(place_p->tok_distr+ii) = dd;
	    fscanf(fp,"%lg", &dd ); *(place_p->cum_distr+ii) = dd;
	  }
        while ( getc(fp) != '\n' );
      }
#ifdef DEBUG
  fprintf(stderr,"    ... restore_checkpoint: reading trans thru\n" );
#endif
    for ( nn = 0 ; nn++ < trans_num ;  trans_p++ ) {
	fscanf(fp,"%d %ld", &nt, &uu ); trans_p->count = uu;
	fscanf(fp,"%ld", &uu ); trans_p->cumcount = uu;
        while ( getc(fp) != '\n' );
      }
#ifdef DEBUG
  fprintf(stderr,"    ... restore_checkpoint: reading probs\n" );
#endif
    for ( nn = 0 ; nn++ < maxprob ;  prob_p++ ) {
	fscanf(fp,"%d %lg", &npro, &dd ); prob_p->val = dd;
	fscanf(fp,"%d %lg", &npro, &dd ); prob_p->cumval = dd;
        while ( getc(fp) != '\n' );
      }
    (void)fclose(fp);
#ifdef DEBUGCALLS
  fprintf(stderr,"    End of restore_checkpoint\n" );
#endif
}


purge_history( at_time )
double at_time;
    {
    FILE * fp2;
    char ccc[600];
    char c;

#ifdef DEBUGCALLS
  fprintf(stderr,"  Start of purge_history at time %1.6g\n", at_time );
#endif
    if ( (ckpf = fopen(history_name,"r")) == NULL ) {
	fprintf(stderr,"\n Measurer ERROR: couldn't open %s file\n",
		       history_name );
	return;
      }
    at_time = search_simulation_state( at_time, ckpf );
    if ( (fp2 = fopen(tmp_checkpoint_name,"w")) == NULL ) {
	fprintf(stderr,"\n Measurer ERROR: couldn't open %s file\n",
		       tmp_checkpoint_name );
	(void)fclose(ckpf); ckpf = NULL;
	return;
      }
    fprintf(fp2,"%1.6lg ", at_time );
    for ( c=getc(ckpf) ; c != EOF ; putc(c,fp2), c=getc(ckpf) );
    (void)fclose(ckpf); ckpf = NULL;
    (void)fclose(fp2);
    sprintf(ccc,"/bin/mv %s %s", tmp_checkpoint_name, history_name );
    system( ccc );
    printf("p %1.6lg\n", at_time ); fflush(stdout);
#ifdef DEBUGCALLS
  fprintf(stderr,"  End of purge_history\n" );
#endif
}


init_checkpoint()
    {
    FILE * fp;
    extern double target_time;
    int my_pid = getpid();
    char hostname[128];

#ifdef DEBUGCALLS
  fprintf(stderr," Start of init_checkpoint\n");
#endif
    gethostname(hostname,128);
    sprintf(history_name,"%s.mtrace", netname );
    if ( (fp = fopen(history_name,"r")) == NULL ) {
	fp = fopen(history_name,"w");
	fprintf(fp,"-1\n");
      }
    fclose(fp);
    sprintf(history_name,"%s_%s_%d.mtrace", netname, hostname, my_pid );
    sprintf(cat_checkpoint_history, "/bin/cp %s.mtrace %s",
	netname, history_name );
    system( cat_checkpoint_history );
    sprintf(cur_checkpoint_name,"%s_%s_%d.mckp", netname,
	    hostname, my_pid );
    sprintf(tmp_checkpoint_name,"%s_%s_%d.mtmp", netname,
	    hostname, my_pid );
    sprintf(cat_checkpoint_history,
	    "cat %s %s > %s; /bin/mv %s %s ; /bin/rm -f %s",
	    cur_checkpoint_name, history_name, tmp_checkpoint_name,
	    tmp_checkpoint_name, history_name,
	    cur_checkpoint_name );
    initialize_zero();
    if ( (fp = fopen(history_name,"r")) == NULL ) {
        fprintf(stderr,
	    "\n Measurer ERROR: couldn't open %s file\n",
	     history_name );
        printf("E\n"); fflush(stdout);
        exit(1);
      }
    fclose(fp);
#ifdef DEBUGCALLS
  fprintf(stderr," End of init_checkpoint\n");
#endif
}


initialize_zero()
    {
    FILE * fp;
    Place_p place_p = p_list;
    Trans_p trans_p = t_list;
    Prob_p prob_p = Prob+1;
    unsigned char * uc_p = cmarks;
    int nn, ii, jj;

#ifdef DEBUGCALLS
  fprintf(stderr,"    Start of initialize_zero\n");
#endif
    cur_time = last_time = 0.0;
    decode_mark( cmarks, DM );
    for ( nn = 0 ; nn++ < place_num ;  place_p++ ) {
	place_p->alb = DM[nn];
	place_p->aub = DM[nn];
	for ( ii = 0 ; ii <= place_p->rubound ; ii++ ) {
	    *(place_p->cum_distr+ii) = *(place_p->tok_distr+ii) = 0.0;
	  }
      }
    for ( nn = 0 ; nn++ < trans_num ;  trans_p++ ) {
	trans_p->cumcount = trans_p->count = 0;
      }
    for ( nn = 0 ; nn++ < maxprob ;  prob_p++ ) {
	prob_p->val = prob_p->cumval = 0.0;
      }
#ifdef DEBUGCALLS
  fprintf(stderr,"    End of initialize_zero\n" );
#endif
}



finish_checkpoint() {
    char copy_history[1024];

    sprintf(copy_history,"/bin/mv %s %s.mtrace", history_name, netname );
    system(copy_history);
}


out_results()
    {
    Place_p place_p;
    Trans_p trans_p;
    Res_p res_p;
    int ii, jj;
    FILE * fp;
    char sss[1024];
    double dd;
    double delta_t = cur_time-last_time;

    printf("A %lg\n", delta_t );
    last_time = cur_time;
    for ( trans_p = t_list, ii = 0 ; ii++ < trans_num ; trans_p++ ) {
        printf(" %lg\n", (double)(trans_p->count) );
        trans_p->cumcount += trans_p->count;
        trans_p->count = 0;
      }
    sprintf(sss,"%s.tpd", netname);
    if ( (fp = fopen(sss,"w")) == NULL ) {
	fprintf(stderr,"\n Measurer ERROR: couldn't open %s file for w\n",
		       sss );
	return;
      }
    for ( place_p = p_list, ii = 0 ; ii++ < place_num ; place_p++ ) {
	dd = place_p->alb; store_double(&dd,fp);
	dd = place_p->aub; store_double(&dd,fp);
        for ( jj = 0 ; jj <= place_p->rubound ; jj++ ) {
            printf(" %lg", *(place_p->tok_distr+jj) );
            *(place_p->cum_distr+jj) += *(place_p->tok_distr+jj);
	    if ( jj >= place_p->alb - place_p->lbound &&
	         jj <= place_p->aub - place_p->lbound ) {
		if ( cur_time > 0.0 ) {
		    dd = *(place_p->cum_distr+jj) / cur_time;
		  }
		else {
		    dd = 1.0 / (place_p->aub - place_p->alb + 1);
		  }
		store_double(&dd,fp);
	      }
            *(place_p->tok_distr+jj) = 0.0;
	  }
        printf("\n");
      }
    for ( ii = 0 ; ii++ < place_num ; ) {
	dd = -1.0; store_double(&dd,fp); /* result precision */
      }
    (void)fclose(fp);
    sprintf(sss,"%s.sta", netname);
    if ( (fp = fopen(sss,"w")) == NULL ) {
	fprintf(stderr,"\n Measurer ERROR: couldn't open %s file for w\n",
		       sss );
	return;
      }
    for ( res_p = Res+1, ii = 0 ; ii++ < maxres ; res_p++ ) {
        printf(" %lg\n", res_p->val );
        if ( res_p->type )
	    fprintf(fp,"%s = %lg\n", res_p->name, (cur_time > 0.0)?
                         res_p->cumval/cur_time : 0 );
        else
	    fprintf(fp,"%s = %lg\n", res_p->name, (delta_t > 0.0)?
                         res_p->val/delta_t : 0 );
        res_p->val = 0.0;
      }
    fflush(stdout);
    for ( trans_p = t_list, ii = 0 ; ii++ < trans_num ; trans_p++ ) {
	dd = (cur_time > 0.0)? trans_p->cumcount/cur_time: 0;
        fprintf(fp, "Thru_%s = %lg\n", trans_p->name, dd );
      }
    (void)fclose(fp);
    sprintf(sss,"/bin/rm -f %s.SIMCC", netname);
    system(sss);
#ifdef DEBUG
  fprintf(stderr,"Measure: removed SIMCC\n");
#endif DEBUG
}

